// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(BookRentalContext))]
    [Migration("20250517073859_InitDB")]
    partial class InitDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("api.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("GenreID");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ISBN");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("PublishedYear")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int")
                        .HasColumnName("PublisherID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("BookId")
                        .HasName("PK__Books__3DE0C22765CA3FF4");

                    b.HasIndex("GenreId");

                    b.HasIndex("PublisherId");

                    b.HasIndex(new[] { "Isbn" }, "UQ__Books__447D36EAD9848AFF")
                        .IsUnique();

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = "H.G. Wells",
                            GenreId = 1,
                            Isbn = "9780451528551",
                            Price = 50000m,
                            PublisherId = 1,
                            Quantity = 0,
                            Title = "The Time Machine"
                        },
                        new
                        {
                            BookId = 2,
                            Author = "Frank Herbert",
                            GenreId = 1,
                            Isbn = "9780441172719",
                            Price = 45000m,
                            PublisherId = 2,
                            Quantity = 0,
                            Title = "Dune"
                        },
                        new
                        {
                            BookId = 3,
                            Author = "J.R.R. Tolkien",
                            GenreId = 2,
                            Isbn = "9780547928227",
                            Price = 40000m,
                            PublisherId = 1,
                            Quantity = 0,
                            Title = "The Hobbit"
                        },
                        new
                        {
                            BookId = 4,
                            Author = "Patrick Rothfuss",
                            GenreId = 2,
                            Isbn = "9780756404741",
                            Price = 40000m,
                            PublisherId = 3,
                            Quantity = 0,
                            Title = "The Name of the Wind"
                        },
                        new
                        {
                            BookId = 5,
                            Author = "Gillian Flynn",
                            GenreId = 3,
                            Isbn = "9780307588371",
                            Price = 35000m,
                            PublisherId = 2,
                            Quantity = 0,
                            Title = "Gone Girl"
                        },
                        new
                        {
                            BookId = 6,
                            Author = "Stieg Larsson",
                            GenreId = 3,
                            Isbn = "9780307454546",
                            Price = 45000m,
                            PublisherId = 3,
                            Quantity = 0,
                            Title = "The Girl with the Dragon Tattoo"
                        },
                        new
                        {
                            BookId = 7,
                            Author = "Jane Austen",
                            GenreId = 4,
                            Isbn = "9780141439518",
                            Price = 20000m,
                            PublisherId = 1,
                            Quantity = 0,
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            BookId = 8,
                            Author = "Nicholas Sparks",
                            GenreId = 4,
                            Isbn = "9780446605236",
                            Price = 20000m,
                            PublisherId = 2,
                            Quantity = 0,
                            Title = "The Notebook"
                        });
                });

            modelBuilder.Entity("api.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CartID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<DateTime?>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CartId")
                        .HasName("PK__Cart__51BCD79721FD00CE");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("api.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GenreID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("GenreId")
                        .HasName("PK__Genres__0385055EF2F7C936");

                    b.HasIndex(new[] { "GenreName" }, "UQ__Genres__BBE1C33950C3A98F")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            GenreName = "Science Fiction"
                        },
                        new
                        {
                            GenreId = 2,
                            GenreName = "Fantasy"
                        },
                        new
                        {
                            GenreId = 3,
                            GenreName = "Mystery"
                        },
                        new
                        {
                            GenreId = 4,
                            GenreName = "Romance"
                        });
                });

            modelBuilder.Entity("api.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<DateTime?>("InvoiceDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("RentalId")
                        .HasColumnType("int")
                        .HasColumnName("RentalID");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("InvoiceId")
                        .HasName("PK__Invoices__D796AAD5ED2F1A10");

                    b.HasIndex("RentalId");

                    b.HasIndex("UserId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("api.Models.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PublisherID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherId"));

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("PublisherId")
                        .HasName("PK__Publishe__4C657E4B7E835C27");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherId = 1,
                            ContactPerson = "Alice Johnson",
                            CreatedAt = new DateTime(2025, 5, 17, 14, 38, 59, 66, DateTimeKind.Local).AddTicks(8247),
                            Email = "alice@penguin.com",
                            PhoneNumber = "1234567890",
                            PublisherName = "Penguin Random House"
                        },
                        new
                        {
                            PublisherId = 2,
                            ContactPerson = "Bob Smith",
                            CreatedAt = new DateTime(2025, 5, 17, 14, 38, 59, 68, DateTimeKind.Local).AddTicks(1420),
                            Email = "bob@harpercollins.com",
                            PhoneNumber = "0987654321",
                            PublisherName = "HarperCollins"
                        },
                        new
                        {
                            PublisherId = 3,
                            ContactPerson = "Carol White",
                            CreatedAt = new DateTime(2025, 5, 17, 14, 38, 59, 68, DateTimeKind.Local).AddTicks(1433),
                            Email = "carol@simon.com",
                            PhoneNumber = "1122334455",
                            PublisherName = "Simon & Schuster"
                        });
                });

            modelBuilder.Entity("api.Models.Rental", b =>
                {
                    b.Property<int>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RentalID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentalId"));

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RentalDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("RentalId")
                        .HasName("PK__Rentals__97005963BDC801CC");

                    b.HasIndex("UserId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("api.Models.RentalDetail", b =>
                {
                    b.Property<int>("RentalDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RentalDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentalDetailId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("RentalId")
                        .HasColumnType("int")
                        .HasColumnName("RentalID");

                    b.HasKey("RentalDetailId")
                        .HasName("PK__RentalDe__10B35999A4E4B474");

                    b.HasIndex("BookId");

                    b.HasIndex("RentalId");

                    b.ToTable("RentalDetails");
                });

            modelBuilder.Entity("api.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int?>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("ReviewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ReviewId")
                        .HasName("PK__Reviews__74BC79AEB3AE28FC");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCAC723A07D8");

                    b.HasIndex(new[] { "Username" }, "UQ__Users__536C85E4C97A627C")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D1053414EDCF60")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "123 Admin St",
                            CreatedAt = new DateTime(2025, 5, 17, 14, 38, 59, 68, DateTimeKind.Local).AddTicks(9167),
                            Email = "admin1@example.com",
                            FullName = "System Administrator",
                            Password = "admin123",
                            PhoneNumber = "0900000001",
                            Role = 1,
                            Username = "admin1"
                        },
                        new
                        {
                            UserId = 2,
                            Address = "456 Staff Rd",
                            CreatedAt = new DateTime(2025, 5, 17, 14, 38, 59, 68, DateTimeKind.Local).AddTicks(9511),
                            Email = "staff1@example.com",
                            FullName = "Library Staff",
                            Password = "staff123",
                            PhoneNumber = "0900000002",
                            Role = 2,
                            Username = "staff1"
                        },
                        new
                        {
                            UserId = 3,
                            Address = "789 Lesse Ave",
                            CreatedAt = new DateTime(2025, 5, 17, 14, 38, 59, 68, DateTimeKind.Local).AddTicks(9516),
                            Email = "lesse1@example.com",
                            FullName = "John Lesse",
                            Password = "lesse123",
                            PhoneNumber = "0900000003",
                            Role = 3,
                            Username = "lesse1"
                        },
                        new
                        {
                            UserId = 4,
                            Address = "101 Reader Ln",
                            CreatedAt = new DateTime(2025, 5, 17, 14, 38, 59, 68, DateTimeKind.Local).AddTicks(9519),
                            Email = "lesse2@example.com",
                            FullName = "Jane Reader",
                            Password = "lesse456",
                            PhoneNumber = "0900000004",
                            Role = 3,
                            Username = "lesse2"
                        });
                });

            modelBuilder.Entity("api.Models.Book", b =>
                {
                    b.HasOne("api.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .HasConstraintName("FK__Books__GenreID__44FF419A");

                    b.HasOne("api.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .IsRequired()
                        .HasConstraintName("FK__Books__Publisher__440B1D61");

                    b.Navigation("Genre");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("api.Models.Cart", b =>
                {
                    b.HasOne("api.Models.Book", "Book")
                        .WithMany("Carts")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__Cart__BookID__4AB81AF0");

                    b.HasOne("api.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Cart__UserID__49C3F6B7");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Invoice", b =>
                {
                    b.HasOne("api.Models.Rental", "Rental")
                        .WithMany("Invoices")
                        .HasForeignKey("RentalId")
                        .IsRequired()
                        .HasConstraintName("FK__Invoices__Rental__59063A47");

                    b.HasOne("api.Models.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Invoices__UserID__59FA5E80");

                    b.Navigation("Rental");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Rental", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithMany("Rentals")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Rentals__UserID__4F7CD00D");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.RentalDetail", b =>
                {
                    b.HasOne("api.Models.Book", "Book")
                        .WithMany("RentalDetails")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__RentalDet__BookI__5441852A");

                    b.HasOne("api.Models.Rental", "Rental")
                        .WithMany("RentalDetails")
                        .HasForeignKey("RentalId")
                        .IsRequired()
                        .HasConstraintName("FK__RentalDet__Renta__534D60F1");

                    b.Navigation("Book");

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("api.Models.Review", b =>
                {
                    b.HasOne("api.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__BookID__5FB337D6");

                    b.HasOne("api.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__UserID__5EBF139D");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Book", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("RentalDetails");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("api.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("api.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("api.Models.Rental", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("RentalDetails");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Invoices");

                    b.Navigation("Rentals");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
